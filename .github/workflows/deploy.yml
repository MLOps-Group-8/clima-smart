name: Deploy Airflow to GCP VM

on:
  push:
    branches:
      - model-deployment-ds

jobs:
  deploy:
    name: Build and Deploy to GCP VM
    runs-on: ubuntu-latest
    steps:
      - name: Setup Environment Variables
        id: vars
        env:
          GCP_ZONE: us-east1-b
        run: |
          # Generate a unique name for the new VM
          NEW_VM_NAME="airflow-$(date +%Y%m%d%H%M%S)"
          echo "NEW_VM_NAME=$NEW_VM_NAME" >> $GITHUB_ENV
          echo "NEW_VM_NAME=$NEW_VM_NAME" # Pass to other steps
          echo "::set-output name=new_vm_name::$NEW_VM_NAME"

      - name: Debug Environment Variables
        run: |
          echo "GCP_ZONE: ${{ env.GCP_ZONE }}"
          echo "NEW_VM_NAME: ${{ env.NEW_VM_NAME }}"

      - name: Configure GCloud Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Create New VM
        run: |
          gcloud config set compute/zone us-east1-b
          gcloud compute instances create ${{ env.NEW_VM_NAME }} \
            --machine-type=e2-standard-2 \
            --boot-disk-size=50GB \
            --boot-disk-type=pd-standard \
            --image-family=ubuntu-2004-lts \
            --image-project=ubuntu-os-cloud \
            --tags=http-server \
            --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/logging.write

      - name: Enable Cloud Monitoring on New VM
        run: |
          gcloud compute ssh ${{ env.NEW_VM_NAME }} --zone=us-east1-b --command "
            curl -sSO https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh &&
            sudo bash add-monitoring-agent-repo.sh &&
            sudo apt-get update &&
            sudo apt-get install -y stackdriver-agent &&
            sudo service stackdriver-agent start
          "

      - name: Configure Firewall Rules
        run: |
          # Allow Airflow web server traffic
          gcloud compute firewall-rules create allow-airflow \
            --allow tcp:8080 \
            --description="Allow incoming traffic on TCP port 8080" \
            --direction=INGRESS \
            --target-tags=http-server || echo "Airflow firewall rule already exists"

          # Allow Mlflow server traffic
          gcloud compute firewall-rules create allow-mlflow \
            --allow tcp:5000 \
            --description="Allow incoming traffic on TCP port 5000" \
            --direction=INGRESS \
            --target-tags=http-server || echo "Mlflow firewall rule already exists"

      - name: Fetch Repository
        run: |
          # Clone the repository to a temporary location on the runner
          git clone https://github.com/MLOps-Group-8/clima-smart.git ~/clima-smart

      - name: Upload Repository and Deployment Script to VM
        run: |
          # Upload the repository to the VM
          gcloud compute scp --recurse --zone=$GCP_ZONE ~/clima-smart ${{ env.NEW_VM_NAME }}:~/

      - name: Run Docker Setup Script on VM
        run: |
          # SSH into the VM, make the script executable, and execute it
          gcloud compute ssh ${{ env.NEW_VM_NAME }} --zone=$GCP_ZONE --command "
            chmod +x ~/clima-smart/scripts/setup_docker.sh &&
            ~/clima-smart/scripts/setup_docker.sh
          "

      - name: Install Docker and Deploy Code on New VM
        run: |
          gcloud compute ssh ${{ env.NEW_VM_NAME }} --zone=us-east1-b --command "
            # Change to the repository directory
            cd clima-smart &&

            # Set permissions for scripts and other required files
            chmod -R 755 ./scripts &&
            chmod -R 755 ./dags &&
            chmod -R 755 ./logs &&
            chmod -R 755 ./plugins &&
            chmod -R 755 ./config

            # Download key.json from Google Cloud Storage and move to config folder
            gsutil cp gs://clima-smart-secrets/key.json ./config/key.json &&
            
            # Verify key.json file is in the correct location
            ls -l ./config/key.json || echo 'key.json not found' &&
            
            # Build and deploy using Docker Compose
            docker compose build &&
            docker compose up airflow-init &&
            docker compose up -d
          "

      - name: Verify Deployment
        run: |
          gcloud compute ssh ${{ env.NEW_VM_NAME }} --zone=us-east1-b --command "
            curl -I http://localhost:8080 || echo 'Deployment verification failed'
          "

      - name: Delete Previous VM
        if: success()
        env:
          GCP_ZONE: us-east1-b
        run: |
          OLD_VM_NAME=$(gcloud compute instances list --filter="name ~ '^airflow-' AND name!='$NEW_VM_NAME'" --format="value(name)" | head -n 1)
          if [ -n "$OLD_VM_NAME" ]; then
            gcloud compute instances delete $OLD_VM_NAME --zone=us-east1-b --quiet || echo "Failed to delete old VM: $OLD_VM_NAME"
          else
            echo "No previous VM found to delete."
          "