name: Deploy Streamlit to GCP Managed Instance

on:
  push:
    branches:
      - model-deployment-ds

jobs:
  deploy:
    name: Deploy Streamlit App with Monitoring and Zero Downtime
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Environment Variables
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: us-east1
        run: |
          IMAGE_NAME="gcr.io/$GCP_PROJECT_ID/streamlit-app:latest"
          TEMPLATE_NAME="streamlit-template-$(date +%s)"
          DEPLOYMENT_GROUP="streamlit-group"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV
          echo "DEPLOYMENT_GROUP=$DEPLOYMENT_GROUP" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Authenticate Docker with GCP
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} ./streamlit
          docker push ${{ env.IMAGE_NAME }}

      - name: Create Instance Template with Monitoring
        run: |
          gcloud compute instance-templates create ${{ env.TEMPLATE_NAME }} \
            --machine-type=e2-standard-2 \
            --region=${{ env.GCP_REGION }} \
            --network=default \
            --image-family=debian-11 \
            --image-project=debian-cloud \
            --boot-disk-size=20GB \
            --boot-disk-type=pd-standard \
            --metadata=startup-script='#! /bin/bash
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            
            # Install Google Cloud Ops Agent for Monitoring and Logging
            curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh
            sudo bash add-google-cloud-ops-agent-repo.sh --also-install
            sudo systemctl restart google-cloud-ops-agent

            # Set up application-specific monitoring configuration
            sudo tee /etc/google-cloud-ops-agent/config.yaml > /dev/null <<EOF
            logging:
              receivers:
                streamlit_logs:
                  type: files
                  include_paths:
                    - /var/log/docker.log
                    - /var/lib/docker/containers/*/*.log
              service:
                pipelines:
                  default_pipeline:
                    receivers: [streamlit_logs]
            metrics:
              receivers:
                host_metrics:
                  type: hostmetrics
              service:
                pipelines:
                  default_pipeline:
                    receivers: [host_metrics]
            EOF
            sudo systemctl restart google-cloud-ops-agent

            # Run the Streamlit app container
            echo "export GOOGLE_APPLICATION_CREDENTIALS=/config/key.json" >> ~/.bashrc
            sudo mkdir -p /config
            sudo gsutil cp gs://clima-smart-secrets/key.json /config/key.json
            sudo docker run -d -p 8501:8501 \
              -v /config:/config \
              -e GOOGLE_APPLICATION_CREDENTIALS=/config/key.json \
              ${{ env.IMAGE_NAME }}'

      - name: Perform Rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.DEPLOYMENT_GROUP }} \
            --version=template=${{ env.TEMPLATE_NAME }} \
            --zone=us-east1-b

      - name: Verify Deployment
        run: |
          for i in {1..30}; do
            STATUS=$(gcloud compute instance-groups managed list-instances ${{ env.DEPLOYMENT_GROUP }} --zone=us-east1-b --format="value(instance,status)" | grep -v "RUNNING")
            if [ -z "$STATUS" ]; then
              echo "All instances are running."
              exit 0
            fi
            echo "Waiting for instances to become healthy..."
            sleep 10
          done
          echo "Deployment verification failed."
          exit 1

      - name: Shut Down Previous Instances
        run: |
          OLD_INSTANCES=$(gcloud compute instances list --filter="name ~ '^streamlit-instance' AND status!='RUNNING'" --format="value(name)")
          if [ -n "$OLD_INSTANCES" ]; then
            for instance in $OLD_INSTANCES; do
              gcloud compute instances delete $instance --zone=us-east1-b --quiet || echo "Failed to delete old instance: $instance"
            done
          else
            echo "No old instances to shut down."
          fi

      - name: Create Load Balancer (If Not Already Created)
        run: |
          # Set up health checks
          gcloud compute health-checks create tcp streamlit-health-check \
            --port=8501 || echo "Health check already exists."

          # Attach health checks to instance group
          gcloud compute instance-groups managed set-named-ports ${{ env.DEPLOYMENT_GROUP }} \
            --named-ports=http:8501 --zone=us-east1-b || echo "Named ports already set."

          # Create a backend service
          gcloud compute backend-services create streamlit-backend \
            --protocol=HTTP \
            --health-checks=streamlit-health-check \
            --port-name=http \
            --global || echo "Backend service already exists."

          # Add the instance group to the backend service
          gcloud compute backend-services add-backend streamlit-backend \
            --instance-group=${{ env.DEPLOYMENT_GROUP }} \
            --instance-group-zone=us-east1-b \
            --global || echo "Instance group already attached to backend service."

          # Create a URL map
          gcloud compute url-maps create streamlit-url-map \
            --default-service=streamlit-backend || echo "URL map already exists."

          # Create a target HTTP proxy
          gcloud compute target-http-proxies create streamlit-http-proxy \
            --url-map=streamlit-url-map || echo "HTTP proxy already exists."

          # Reserve a global static IP address
          gcloud compute addresses create streamlit-ip \
            --ip-version=IPV4 \
            --global || echo "Static IP already reserved."

          # Create a global forwarding rule
          gcloud compute forwarding-rules create streamlit-rule \
            --address=streamlit-ip \
            --global \
            --target-http-proxy=streamlit-http-proxy \
            --ports=80 || echo "Forwarding rule already exists."
