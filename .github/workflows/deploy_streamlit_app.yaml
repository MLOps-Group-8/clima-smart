name: Deploy Streamlit to GCP Managed Instance

on:
  push:
    branches:
      - model-deployment-ds

jobs:
  deploy:
    name: Deploy Streamlit App with Monitoring and Zero Downtime
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Environment Variables
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: us-east1
          DEPLOYMENT_GROUP: streamlit-group
        run: |
          IMAGE_NAME="gcr.io/$GCP_PROJECT_ID/streamlit-app:latest"
          TEMPLATE_NAME="streamlit-template-$(date +%s)"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV
          echo "DEPLOYMENT_GROUP=$DEPLOYMENT_GROUP" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Authenticate Docker with GCP
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} ./streamlit
          docker push ${{ env.IMAGE_NAME }}

      - name: Create Instance Template
        run: |
          gcloud compute instance-templates create ${{ env.TEMPLATE_NAME }} \
            --machine-type=e2-standard-2 \
            --region=${{ env.GCP_REGION }} \
            --network=default \
            --image-family=debian-11 \
            --image-project=debian-cloud \
            --boot-disk-size=20GB \
            --boot-disk-type=pd-standard \
            --metadata=startup-script='#! /bin/bash
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            
            # Run the Streamlit app container
            echo "export GOOGLE_APPLICATION_CREDENTIALS=/config/key.json" >> ~/.bashrc
            sudo mkdir -p /config
            sudo gsutil cp gs://clima-smart-secrets/key.json /config/key.json
            sudo docker run -d -p 8501:8501 \
              -v /config:/config \
              -e GOOGLE_APPLICATION_CREDENTIALS=/config/key.json \
              ${{ env.IMAGE_NAME }}'

      - name: Create or Update Managed Instance Group
        run: |
          # Check if the instance group already exists
          INSTANCE_GROUP_EXISTS=$(gcloud compute instance-groups managed list \
            --filter="name=${{ env.DEPLOYMENT_GROUP }}" \
            --zones=us-east1-b --format="value(name)" | grep -w ${{ env.DEPLOYMENT_GROUP }} || echo "")
          
          if [ -z "$INSTANCE_GROUP_EXISTS" ]; then
            echo "Creating managed instance group..."
            gcloud compute instance-groups managed create ${{ env.DEPLOYMENT_GROUP }} \
              --base-instance-name=streamlit-instance \
              --template=${{ env.TEMPLATE_NAME }} \
              --size=1 \
              --zone=us-east1-b
          else
            echo "Managed instance group already exists. Performing rolling update..."
            gcloud compute instance-groups managed rolling-action start-update ${{ env.DEPLOYMENT_GROUP }} \
              --version=template=${{ env.TEMPLATE_NAME }} \
              --zone=us-east1-b
          fi

      - name: Verify Deployment
        run: |
          for i in {1..30}; do
            STATUS=$(gcloud compute instance-groups managed list-instances ${{ env.DEPLOYMENT_GROUP }} --zone=us-east1-b --format="value(instance,status)" | grep -v "RUNNING")
            if [ -z "$STATUS" ]; then
              echo "All instances are running."
              exit 0
            fi
            echo "Waiting for instances to become healthy..."
            sleep 10
          done
          echo "Deployment verification failed."
          exit 1
